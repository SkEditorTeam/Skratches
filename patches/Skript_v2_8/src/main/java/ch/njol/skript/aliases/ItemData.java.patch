--- a/src/main/java/ch/njol/skript/aliases/ItemData.java
+++ b/src/main/java/ch/njol/skript/aliases/ItemData.java
@@ -94,6 +_,7 @@
 	/**
 	 * ItemStack, which is used for everything but serialization.
 	 */
+	@Nullable
 	transient ItemStack stack;
 	
 	/**
@@ -141,8 +_,9 @@
 	public ItemData(Material type, @Nullable String tags) {
 		this.type = type;
 		
+		if (type.isItem())
 		this.stack = new ItemStack(type);
-		this.blockValues = BlockCompat.INSTANCE.getBlockValues(stack);
+		this.blockValues = BlockCompat.INSTANCE.getBlockValues(type);
 		if (tags != null) {
 			applyTags(tags);
 		}
@@ -150,8 +_,9 @@
 	
 	public ItemData(Material type, int amount) {
 		this.type = type;
+		if (type.isItem())
 		this.stack = new ItemStack(type, Math.abs(amount));
-		this.blockValues = BlockCompat.INSTANCE.getBlockValues(stack);
+		this.blockValues = BlockCompat.INSTANCE.getBlockValues(type);
 	}
 	
 	public ItemData(Material type) {
@@ -159,13 +_,18 @@
 	}
 	
 	public ItemData(ItemData data) {
-		this.stack = data.stack.clone();
+		this.stack = data.stack != null ? data.stack.clone() : null;
 		this.type = data.type;
 		this.blockValues = data.blockValues;
 		this.isAlias = data.isAlias;
 		this.plain = data.plain;
 		this.itemFlags = data.itemFlags;
 	}
+
+	public ItemData(Material material, @Nullable BlockValues values) {
+		this.type = material;
+		this.blockValues = values;
+	}
 	
 	public ItemData(ItemStack stack, @Nullable BlockValues values) {
 		this.stack = stack;
@@ -200,6 +_,7 @@
 
 	public ItemData(BlockData blockData) {
 		this.type = blockData.getMaterial();
+		if (type.isItem())
 		this.stack = new ItemStack(type);
 		this.blockValues = BlockCompat.INSTANCE.getBlockValues(blockData);
 	}
@@ -227,11 +_,11 @@
 		if (type != item.getType())
 			return false; // Obvious mismatch
 		
-		if (itemFlags != 0) { // Either stack has tags (or durability)
+		if (stack != null && itemFlags != 0) { // Either stack has tags (or durability)
 			if (ItemUtils.getDamage(stack) != ItemUtils.getDamage(item))
 				return false; // On 1.12 and below, damage is not in meta
 			if (stack.hasItemMeta() == item.hasItemMeta()) // Compare ItemMeta as in isSimilar() of ItemStack
-				return stack.hasItemMeta() ? itemFactory.equals(stack.getItemMeta(), item.getItemMeta()) : true;
+				return !stack.hasItemMeta() || itemFactory.equals(stack.getItemMeta(), item.getItemMeta());
 			else
 				return false;
 		}
@@ -249,7 +_,7 @@
 	
 	public String toString(final boolean debug, final boolean plural) {
 		StringBuilder builder = new StringBuilder(Aliases.getMaterialName(this, plural));
-		ItemMeta meta = stack.getItemMeta();
+		ItemMeta meta = stack != null ? stack.getItemMeta() : null;
 		if (meta != null && meta.hasDisplayName()) {
 			builder.append(" ").append(m_named).append(" ");
 			builder.append(meta.getDisplayName());
@@ -282,7 +_,7 @@
 	@Override
 	public int hashCode() {
 		int hash = type.hashCode(); // Has collisions, but probably not too many of them
-		if (blockValues == null || (blockValues != null && blockValues.isDefault())) {
+		if (blockValues == null || blockValues.isDefault()) {
 			hash = hash * 37 + 1;
 		}
 		return hash;
@@ -351,7 +_,7 @@
 		}
 		
 		// See if we need to compare item metas (excluding durability)
-		if (quality.isAtLeast(MatchQuality.SAME_ITEM) && stack.hasItemMeta() || item.stack.hasItemMeta()) { // Item meta checks could lower this
+		if (quality.isAtLeast(MatchQuality.SAME_ITEM) && this.hasItemMeta() || item.hasItemMeta()) { // Item meta checks could lower this
 			MatchQuality metaQuality = compareItemMetas(getItemMeta(), item.getItemMeta());
 			
 			// If given item doesn't care about meta, promote to SAME_ITEM
@@ -489,9 +_,14 @@
 	 * It is not a copy, so please be careful.
 	 * @return Item stack.
 	 */
+	@Nullable
 	public ItemStack getStack() {
 		return stack;
 	}
+
+	private boolean hasItemMeta() {
+		return stack != null && stack.hasItemMeta();
+	}
 	
 	@Override
 	public ItemData clone() {
@@ -508,7 +_,7 @@
 	}
 	
 	public ItemMeta getItemMeta() {
-		ItemMeta meta = stack.getItemMeta();
+		ItemMeta meta = stack != null ? stack.getItemMeta() : null;
 		if (meta == null) { // AIR has null item meta!
 			meta = itemFactory.getItemMeta(Material.STONE);
 		}
@@ -517,6 +_,7 @@
 	}
 	
 	public void setItemMeta(ItemMeta meta) {
+		if (stack == null) return;
 		stack.setItemMeta(meta);
 		isAlias = false; // This is no longer exact alias
 		plain = false; // This is no longer a plain item
@@ -524,10 +_,12 @@
 	}
 	
 	public int getDurability() {
+		if (stack == null) return 0; // no damage?
 		return ItemUtils.getDamage(stack);
 	}
 	
 	public void setDurability(int durability) {
+		if (stack == null) return;
 		ItemUtils.setDamage(stack, durability);
 		isAlias = false; // Change happened
 		plain = false; // This is no longer a plain item
@@ -567,7 +_,7 @@
 	public Fields serialize() throws NotSerializableException {
 		Fields fields = new Fields(this); // ItemStack is transient, will be ignored
 		fields.putPrimitive("id", type.ordinal());
-		fields.putObject("meta", stack.getItemMeta());
+		fields.putObject("meta", stack != null ? stack.getItemMeta() : null);
 		return fields;
 	}
 
@@ -579,8 +_,10 @@
 		ItemMeta meta = fields.getAndRemoveObject("meta", ItemMeta.class);
 
 		// Initialize ItemStack
+		if (meta != null && type.isItem()) {
 		this.stack = new ItemStack(type);
 		stack.setItemMeta(meta); // Just set meta to it
+		}
 
 		fields.setFields(this); // Everything but ItemStack and Material
 	}
@@ -598,6 +_,7 @@
 	 */
 	public ItemData aliasCopy() {
 		ItemData data = new ItemData();
+		if (stack != null) {
 		data.stack = new ItemStack(type, 1);
 		
 		if (stack.hasItemMeta()) {
@@ -609,6 +_,7 @@
 		}
 		ItemUtils.setDamage(data.stack, 0); // Set to undamaged
 
+		}
 		data.type = type;
 		data.blockValues = blockValues;
 		data.itemForm = itemForm;
@@ -620,6 +_,7 @@
 	 * @param tags Tags in Mojang's JSON format.
 	 */
 	public void applyTags(String tags) {
+		if (stack == null) return;
 		BukkitUnsafe.modifyItemStack(stack, tags);
 		itemFlags |= ItemFlags.CHANGED_TAGS;
 	}
